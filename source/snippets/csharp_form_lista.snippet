<?xml version="1.0" encoding="utf-8"?>
<CodeSnippets xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>FormLista</Title>
      <Author>Jose Chacon</Author>
      <Description>Define un Modelo con EntityFramework</Description>
      <Shortcut>cstprdformlst</Shortcut>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>Model</ID>
          <ToolTip>Reemplazar por el Nombre del modelo</ToolTip>
          <Default>Model</Default>
        </Literal>
        <Literal>
          <ID>DataSourceName</ID>
          <ToolTip>Reemplazar por el Nombre del modelo</ToolTip>
          <Default>DataSourceName</Default>
        </Literal>
        <Literal>
          <ID>LibraryName</ID>
          <ToolTip>Nombre del esquema</ToolTip>
          <Default>AdmCostoProduccion.Common</Default>
        </Literal>
        <Literal>
          <ID>EsquemaName</ID>
          <ToolTip>Nombre del esquema</ToolTip>
          <Default>Costo</Default>
        </Literal>
        <Literal>
          <ID>Propiedad1</ID>
          <ToolTip>Reemplazar por el Nombre de la Propiedad1</ToolTip>
          <Default>Codigo</Default>
        </Literal>
        <Literal>
          <ID>Propiedad2</ID>
          <ToolTip>Reemplazar por el Nombre de la Propiedad2</ToolTip>
          <Default>Nombre</Default>
        </Literal>
        <Literal>
          <ID>Propiedad3</ID>
          <ToolTip>Reemplazar por el Nombre de la Propiedad3</ToolTip>
          <Default>Descripcion</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp">
        <![CDATA[using $LibraryName$.Classes;
using $LibraryName$.Data;
using $LibraryName$.ViewModels.$EsquemaName$;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace AdmCostoProduccion.Windows.Mantenimiento.$EsquemaName$.$Model$
{
    public partial class Lst$Model$Form : Form
    {
        private ObservableListSource<$Model$ViewModel> ViewModelList = new ObservableListSource<$Model$ViewModel>();

        #region Constructor
        public Lst$Model$Form()
        {
            InitializeComponent();

            ViewModelList = new ObservableListSource<$Model$ViewModel>();
            $DataSourceName$BindingSource.DataSource = ViewModelList;
        }
        #endregion

        #region Eventos de Formulario
        private void AgregarButton_Click(object sender, EventArgs e)
        {
            Agregar();
        }

        private void ModificarButton_Click(object sender, EventArgs e)
        {
            Modificar();
        }

        private void EliminarButton_Click(object sender, EventArgs e)
        {
            Eliminar();
        }

        private void ActualizarButton_Click(object sender, EventArgs e)
        {
            Actualizar();
        }

        private void BuscarButton_Click(object sender, EventArgs e)
        {
            Buscar();
        }

        private void ClearButton_Click(object sender, EventArgs e)
        {
            BusquedaTextBox.Clear();
        }

        private void BusquedaTextBox_KeyUp(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                Buscar();
            }
        }
        #endregion

        #region Eventos Privados
        private void Agregar()
        {
            try
            {
                var frm = new Mnt$Model$Form(ViewModelList);
                frm.ShowDialog();
            }
            catch (Exception ex)
            {
                MessageBox.Show(string.Format("Ocurrió un error al agregar, mensaje de error: {0}", ex.Message)
                    , "Agregar", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void Modificar()
        {
            try
            {
                var viewModel = ($Model$ViewModel)$DataSourceName$BindingSource.Current;
                var frm = new Mnt$Model$Form(viewModel, ViewModelList);
                frm.ShowDialog();
            }
            catch (Exception ex)
            {
                MessageBox.Show(string.Format("Ocurrió un error al modificar, mensaje de error: {0}", ex.Message)
                    , "Modificar", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void Eliminar()
        {
            try
            {
                if (MessageBox.Show("¿Esta seguro de eliminar el registro?", "Eliminar", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
                {
                    Cursor = Cursors.WaitCursor;
                    var context = new ApplicationDbContext();
                    var viewModel = ($Model$ViewModel)$DataSourceName$BindingSource.Current;
                    var model = context.$Model$s
                        .Where(o => o.$Model$Id == viewModel.$Model$Id)
                        .FirstOrDefault();
                    context.$Model$s.Remove(model);
                    context.SaveChanges();
                    ViewModelList.Remove(viewModel);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(string.Format("Ocurrió un error al eliminar, mensaje de error: {0}", ex.Message)
                    , "Eliminar", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            finally
            {
                Cursor = Cursors.Default;
            }
        }

        private void Actualizar()
        {
            try
            {
                Cursor = Cursors.WaitCursor;
                var list = new ApplicationDbContext().$Model$s.ToList();
                ViewModelList.Clear();
                foreach (var model in list)
                {
                    ViewModelList.Add(new $Model$ViewModel(model));
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(string.Format("Ocurrió un error al actualizar, mensaje de error: {0}", ex.Message)
                    , "Actualizar", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            finally
            {
                Cursor = Cursors.Default;
            }
        }

        private void Buscar()
        {
            try
            {
                Cursor = Cursors.WaitCursor;
                var cadenaBusqueda = BusquedaTextBox.Text.Trim().ToUpper();
                var list = new ApplicationDbContext().$Model$s.Where(o =>
                                o.$Propiedad1$.ToUpper().Contains(cadenaBusqueda) ||
                                o.$Propiedad2$.ToUpper().Contains(cadenaBusqueda) ||
                                o.$Propiedad3$.ToUpper().Contains(cadenaBusqueda)).ToList();

                ViewModelList.Clear();
                foreach (var model in list)
                {
                    ViewModelList.Add(new $Model$ViewModel(model));
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(string.Format("Ocurrió un error al buscar, mensaje de error: {0}", ex.Message)
                    , "Buscar", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            finally
            {
                Cursor = Cursors.Default;
            }
        }
        #endregion
    }
}
]]>
      </Code>
    </Snippet>
  </CodeSnippet>
</CodeSnippets>