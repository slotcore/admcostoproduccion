<?xml version="1.0" encoding="utf-8"?>
<CodeSnippets xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>ViewModelParentCreate</Title>
      <Author>Jose Chacon</Author>
      <Description>Define un Modelo con EntityFramework</Description>
      <Shortcut>cstvwmdlprntcreate</Shortcut>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>Model</ID>
          <ToolTip>Reemplazar por el Nombre del modelo</ToolTip>
          <Default>Model</Default>
        </Literal>
        <Literal>
          <ID>ModelChild</ID>
          <ToolTip>Reemplazar por el Nombre del modelo</ToolTip>
          <Default>ModelChild</Default>
        </Literal>
        <Literal>
          <ID>TipoDato1</ID>
          <ToolTip>Reemplazar por el Tipo de Dato1</ToolTip>
          <Default>string</Default>
        </Literal>
        <Literal>
          <ID>Propiedad1</ID>
          <ToolTip>Reemplazar por el Nombre de la Propiedad1</ToolTip>
          <Default>Codigo</Default>
        </Literal>
        <Literal>
          <ID>TipoDato2</ID>
          <ToolTip>Reemplazar por el Tipo de Dato2</ToolTip>
          <Default>string</Default>
        </Literal>
        <Literal>
          <ID>Propiedad2</ID>
          <ToolTip>Reemplazar por el Nombre de la Propiedad2</ToolTip>
          <Default>Nombre</Default>
        </Literal>
        <Literal>
          <ID>TipoDato3</ID>
          <ToolTip>Reemplazar por el Tipo de Dato3</ToolTip>
          <Default>string</Default>
        </Literal>
        <Literal>
          <ID>Propiedad3</ID>
          <ToolTip>Reemplazar por el Nombre de la Propiedad3</ToolTip>
          <Default>Descripcion</Default>
        </Literal>
        <Literal>
          <ID>LibraryName</ID>
          <ToolTip>Nombre del esquema</ToolTip>
          <Default>AdmCostoProduccion.Common</Default>
        </Literal>
        <Literal>
          <ID>EsquemaName</ID>
          <ToolTip>Nombre del esquema</ToolTip>
          <Default>Costo</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp">
        <![CDATA[using $LibraryName$.Classes;
using $LibraryName$.Data;
using $LibraryName$.Models.$EsquemaName$;
using System;
using System.Data.Entity;
using System.Linq;
using System.Text;

namespace $LibraryName$.ViewModels.$EsquemaName$
{
    public class $Model$ViewModel : ObjectBase
    {
        #region Constructor
        
        public $Model$ViewModel()
        {
            _IsNew = true;
        }
        
        public $Model$ViewModel($Model$ model)
        {
            _$Model$Id = model.$Model$Id;
            _$Propiedad1$ = model.$Propiedad1$;
            _$Propiedad2$ = model.$Propiedad2$;
            _$Propiedad3$ = model.$Propiedad3$;

            foreach (var child in model.$ModelChild$s)
            {
                $ModelChild$ViewModels.Add(new $ModelChild$ViewModel(child));
            }
        }
        
        #endregion

        #region Propiedades privadas

        private int _$Model$Id;

        private $TipoDato1$ _$Propiedad1$;

        private $TipoDato2$ _$Propiedad2$;

        private $TipoDato3$ _$Propiedad3$;

        private ObservableListSource<$ModelChild$ViewModel> _$ModelChild$ViewModels 
            = new ObservableListSource<$ModelChild$ViewModel>();

        #endregion

        #region Propiedades publicas

        public int $Model$Id
        {
            get
            {
                return _$Model$Id;
            }

            set
            {
                if (value != _$Model$Id)
                {
                    _$Model$Id = value;
                    NotifyPropertyChanged();
                }
            }
        }

        public $TipoDato1$ $Propiedad1$
        {
            get
            {
                return _$Propiedad1$;
            }

            set
            {
                if (value != _$Propiedad1$)
                {
                    _$Propiedad1$ = value;
                    NotifyPropertyChanged();
                }
            }
        }

        public $TipoDato2$ $Propiedad2$
        {
            get
            {
                return _$Propiedad2$;
            }

            set
            {
                if (value != _$Propiedad2$)
                {
                    _$Propiedad2$ = value;
                    NotifyPropertyChanged();
                }
            }
        }

        public $TipoDato3$ $Propiedad3$
        {
            get
            {
                return _$Propiedad3$;
            }

            set
            {
                if (value != _$Propiedad3$)
                {
                    _$Propiedad3$ = value;
                    NotifyPropertyChanged();
                }
            }
        }

        public ObservableListSource<$ModelChild$ViewModel> $ModelChild$ViewModels
        {
            get
            {
                return _$ModelChild$ViewModels;
            }
            set
            {
                if (value != _$ModelChild$ViewModels)
                {
                    _$ModelChild$ViewModels = value;
                    NotifyPropertyChanged();
                }
            }
        }

        #endregion

        #region Metodos Publicos

        public void CopyOf($Model$ViewModel viewModel)
        {
            _IsNew = viewModel.IsNew;
            _IsOld = viewModel.IsOld;
            _$Model$Id = viewModel.$Model$Id;
            _$Propiedad1$ = viewModel.$Propiedad1$;
            _$Propiedad2$ = viewModel.$Propiedad2$;
            _$Propiedad3$ = viewModel.$Propiedad3$;
            _$ModelChild$ViewModels = viewModel.$ModelChild$ViewModels;
        }

        public $Model$ ToModel()
        {
            $Model$ model = new $Model$
            {
                $Model$Id = _$Model$Id,
                $Propiedad1$ = _$Propiedad1$,
                $Propiedad2$ = _$Propiedad2$,
                $Propiedad3$ = _$Propiedad3$
            };

            return model;
        }

        public void Grabar()
        {
            ApplicationDbContext Context = new ApplicationDbContext();
            $Model$ model = this.ToModel();

            if (IsNew)
            {
                Context.$Model$s.Add(model);
            }
            else
            {
                if (IsOld)
                {
                    Context.Entry(model).State = EntityState.Modified;
                }
            }
            //Childs
            foreach ($ModelChild$ViewModel viewModel in $ModelChild$ViewModels)
            {
                viewModel.Grabar(Context);
            }
            //Childs deletes
            foreach (var viewModel in $ModelChild$ViewModels.GetRemoveItems())
            {
                viewModel.Eliminar(Context);
            }
            Context.SaveChanges();
            _IsNew = false;
            _IsOld = false;
            _$Model$Id = model.$Model$Id;
        }

        public void Eliminar()
        {
            ApplicationDbContext Context = new ApplicationDbContext();

            $Model$ model = this.ToModel();
            foreach (var viewModelChild in $ModelChild$ViewModels)
            {
                viewModelChild.Eliminar(Context);
            }
            Context.Entry(model).State = EntityState.Deleted;
            Context.SaveChanges();
        }

        #endregion
    }
}
]]>
      </Code>
    </Snippet>
  </CodeSnippet>
</CodeSnippets>